//bank 클래스 정의하기

/*
추상화 : 여러 개의 복잡한 자료, 모듈, 시스템 등으로부터 공통된 핵심 개념이나 기능으로 간추리는 것을 말함
	불필요한 부분은 제거하고 공통된 특징을 추출하여 클래스를 간결하게 만들어 이해하기 쉽게 만드는 작업

캡슐화 : 클래스의 구체적인 동작을 외부로 노출하지 않도록 감추는 것.
	멤버 변수와 멤버 함수를 낱개로 외부에서 사용할 수 있게 하는 것이 아니라 
	일련의 과정 하나로 묶어서 관리하는 것.
	캡슐화를 잘 활용하면 프로그램의 복잡도는 낮아지고 재사용성은 높아진다.

상속성 : 부모 클래스의 데이터와 함수를 자삭 클래스가 물려받아 확장하는 것.
	상속을 통해서 논리적인 포함 관계와 공통의 특징을 더 명확하게 모델링할 수 있다.

다형성 : 하나의 클래스가 다양한 형태의 속성과 기능을 할 수 있음을 나타냄.
	부모 클래스에서 정의한 함수를 자식 클래스에서 재정의한 후 부모 클래스처럼 사용 가능.
	이를 통해서, 기능이 확장, 변경 되어도 소스 코드 변경을 최소화할 수 있다.
*/

#include<iostream>
using namespace std;

class bank {
private:
	int safe;
public:
	bank();
	void use_counter(int _in, int _out);
};

bank::bank() {
	safe = 1000;
	cout << "최초 금고 : " << safe << endl;
	cout << endl;
}

void bank::use_counter(int _in, int _out) {
	safe += _in;
	safe -= _out;

	cout << "입금 : " << _in << endl;
	cout << "출금 : " << _out << endl;
	cout << "금고 : " << safe << endl;
	cout << endl;
}

int main() {
	bank my_bank; //인스턴스를 생성하는 코드
	/*
	인스턴스는 클래스가 메모리에 할당되어 생성된 변수로 객체와 같은 의미이다.
	객체는 논리적인 개념으로 사용될 때, 메모리에 생성된 객체를 말할 때는 인스턴스를 사용한다.

	객체 : 논리적 개념으로 클래스를 구현하고자 하는 구현 대상, 또는 인스턴스
	클래스 : 객체를 구현하기 위한 설계도
	인스턴스 : 클래스 정의에 따라 메모리에 실체화된 객체의 형태
	*/

	my_bank.use_counter(0, 20);
	my_bank.use_counter(50, 0);
	my_bank.use_counter(100, 50);
	
	return 0;
}